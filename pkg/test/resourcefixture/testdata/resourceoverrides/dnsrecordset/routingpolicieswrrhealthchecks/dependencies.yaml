# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeNetwork
metadata:
  name: default
  annotations:
    cnrm.cloud.google.com/project-id: "${projectId}"
    cnrm.cloud.google.com/deletion-policy: "abandon"
spec:
  description: Default network for the project
---
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeSubnetwork
metadata:
  name: default
  annotations:
    cnrm.cloud.google.com/project-id: "${projectId}"
    cnrm.cloud.google.com/deletion-policy: "abandon"
spec:
  ipCidrRange: 10.128.0.0/20
  region: us-central1
  networkRef:
    name: default
---
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeAddress
metadata:
  annotations:
    cnrm.cloud.google.com/project-id: "${projectId}"
  name: computeaddress-${uniqueId}
spec:
  addressType: INTERNAL
  location: us-central1
  ipVersion: IPV4
  purpose: SHARED_LOADBALANCER_VIP
  subnetworkRef:
    name: default
---
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeHealthCheck
metadata:
  annotations:
    cnrm.cloud.google.com/project-id: ${projectId}
  name: computehealthcheck-${uniqueId}
spec:
  httpHealthCheck:
    port: 80
  location: us-central1
---
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeInstanceGroup
metadata:
  annotations:
    cnrm.cloud.google.com/project-id: ${projectId}
  name: computeinstancegroup-${uniqueId}
spec:
  zone: us-central1-a
  networkRef:
    name: default
---
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeBackendService
metadata:
  annotations:
    cnrm.cloud.google.com/project-id: ${projectId}
  name: computebackendservice-${uniqueId}
spec:
  healthChecks:
  - healthCheckRef:
      name: computehealthcheck-${uniqueId}
  loadBalancingScheme: INTERNAL
  location: us-central1
  protocol: TCP
  backend:
  - balancingMode: CONNECTION
    group:
      instanceGroupRef:
        name: computeinstancegroup-${uniqueId}
---
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeForwardingRule
metadata:
  annotations:
    cnrm.cloud.google.com/project-id: ${projectId}
  name: computeforwardingrule-${uniqueId}
spec:
  loadBalancingScheme: INTERNAL
  backendServiceRef:
    name: computebackendservice-${uniqueId}
  ipAddress:
    addressRef:
      name: computeaddress-${uniqueId}
  ipProtocol: "TCP"
  location: us-central1
  networkRef:
    name: default
  subnetworkRef:
    name: default
  ports:
    - '80'
  allowGlobalAccess: true
---
apiVersion: dns.cnrm.cloud.google.com/v1beta1
kind: DNSManagedZone
metadata:
  annotations:
    cnrm.cloud.google.com/project-id: ${projectId}
  name: dnsmanagedzone-${uniqueId}
spec:
  dnsName: "cnrm-dns-example-${uniqueId}.com."
  visibility: "private"
  privateVisibilityConfig:
    networks:
      - networkRef:
          name: default
